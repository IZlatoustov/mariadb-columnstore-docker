#!/bin/sh
# Environment variables supported:
# - CS_POSTCFG_INPUT - if set runs postConfigure with the value piped into stdin
# - CS_DATABASE - if set create a database with this name

# file used to track / record initialization and prevent subsequent rerun
FLAG=/initialized
# directory which can contain sql, sql.gz, and sh scripts that will be run
# after succesful initialzation.
INITDIR=/docker-entrypoint-initdb.d

MCSDIR=/usr/local/mariadb/columnstore
MCSMYCMD="$MCSDIR/mysql/bin/mysql --defaults-extra-file=$MCSDIR/mysql/my.cnf -u root"

# wait for the ProcMon process to start
wait_for_procmon()
{
    ps -e | grep ProcMon
    while [ 1 -eq $? ]; do
        sleep 1
        ps -e | grep ProcMon
    done
}

# hack to ensure server-id is set to unique value per vm because my.cnf is
# not in a good location for a volume
SERVER_ID=$(hostname -i | cut -d "." -f 4)
sed -i "s/server-id =.*/server-id = $SERVER_ID/" /usr/local/mariadb/columnstore/mysql/my.cnf 

# Initialize CS only once.
if [ -e $FLAG ]; then
    echo "Container already initialized at $(date)"
else
    # wait for ProcMon to startup
    echo "Initializing container at $(date) - waiting for ProcMon to start"
    wait_for_procmon

    # Compute number of custom install files, if any
    CUSTOM_INSTALL_FILES=$(ls $INITDIR/*.{sql,sql.gz,sh} -la 2>/dev/null | wc -l)

    # first time install with CS_POSTCFG_INPUT set then run postConfigure
    # with this as input. Must stop columnstore service first as postConfigure
    # will fail otherwise. The service is only used for restarted pm1 containers
    # or non pm1 containers in a cluster.
    if [ ! -z "$CS_POSTCFG_INPUT" ]; then
        echo "Stopping columnstore service to run postConfigure"
        /usr/sbin/sv stop columnstore
        echo -e "$CS_POSTCFG_INPUT" | $MCSDIR/bin/postConfigure -n
    elif [ ! -z "$CS_DATABASE" ] || [ $CUSTOM_INSTALL_FILES -gt 0 ]; then
        # container has custom install files but no postConfigure so wait for
        # columnstore to startup by some other means
        echo "Waiting for columnstore to start to run post install files"
        /usr/sbin/wait_for_columnstore_active
        if [ 1 -eq $? ]; then
            # exit now if columnstore did not start
            echo "ERROR: ColumnStore did not start so custom install files not run."
            exit 1
        fi
    fi

    # Create custom database for scripts if needed based on CS_DATABASE env var
    if [ ! -z "$CS_DATABASE" ]; then
        echo "Creating custom database: $CS_DATABASE"
        DBNAME=$CS_DATABASE
        $MCSMYCMD -vvv -e "CREATE DATABASE $DBNAME;" 2>&1
    else
        DBNAME=test
    fi

    # check for any custom post install sql or shell scripts to run in INITDIR
    if [ 0 -eq $CUSTOM_INSTALL_FILES ]; then
        echo "No custom post install files to run at $(date)"
    else
        echo "Executing custom post install files at $(date)"
        cd /docker-entrypoint-initdb.d/
        for f in $(ls $INITDIR/); do
            if [[ $f == *.sql ]];then
                echo "Run $f at $(date)"
                $MCSMYCMD -vvv $DBNAME < $f 2>&1
            elif [[ $f == *.sql.gz ]];then
                echo "Run $f at $(date)"
                zcat $f | $MCSMYCMD -vvv $DBNAME 2>&1
            elif [[ $f == *.sh ]]; then
                chmod 755 $f
                echo "Run $f at $(date)"
                /bin/sh -x $f 2>&1
            fi;
        done;
        echo "Container initialization complete at $(date)"
    fi
    touch $FLAG
fi
exit 0;
